import { statusCodes } from '@react-native-google-signin/google-signin';
import * as SecureStore from 'expo-secure-store';

export interface TokenData {
  accessToken: string;
  refreshToken: string;
  expiresAt?: number; // timestamp ‡πÄ‡∏°‡∏∑‡πà‡∏≠ access token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
}

// ------------------ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ function ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ----------------------------------
// saveTokens() ‚Üí ‡πÄ‡∏Å‡πá‡∏ö access_token , refresh_token
// getAccessToken() ‚Üí ‡∏≠‡πà‡∏≤‡∏ô access token ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å getValidAccessToken ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ô‡∏∞‡πÑ‡∏≠‡πÇ‡∏≠‡∏ä‡∏¥ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏≠‡πà‡∏≤‡∏ô
// getRefreshToken() ‚Üí ‡∏≠‡πà‡∏≤‡∏ô refresh token
// isAccessTokenExpired() ‚Üí ‡πÄ‡∏ä‡πá‡∏Ñ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡∏ï‡∏≤‡∏° exp date
// getValidAccessToken() ‚Üí ‡∏Ç‡∏≠ token ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (auto-refresh)
// refreshAccessToken() ‚Üí ‡∏Ç‡∏≠ token ‡πÉ‡∏´‡∏°‡πà
// isLoggedIn() ‚Üí ‡πÄ‡∏ä‡πá‡∏Ñ login status
// login() ‚Üí ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
// logout() ‚Üí ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö


// Keys ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô SecureStore
const ACCESS_TOKEN_KEY = 'accessToken';
const REFRESH_TOKEN_KEY = 'refreshToken';
const USER_DATA_KEY = 'userData';
const TOKEN_EXPIRES_KEY = 'tokenExpires';

const BASE_URL = "http://192.168.1.104:3000"

export const AuthService = {
  /**
   * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å tokens
   */
  saveTokens: async (tokenData: TokenData): Promise<void> => {
    try {
      await Promise.all([
        SecureStore.setItemAsync(ACCESS_TOKEN_KEY, tokenData.accessToken),
        SecureStore.setItemAsync(REFRESH_TOKEN_KEY, tokenData.refreshToken),
        tokenData.expiresAt 
          ? SecureStore.setItemAsync(TOKEN_EXPIRES_KEY, tokenData.expiresAt.toString())
          : Promise.resolve()
      ]);
    } catch (error) {
      console.error('Error saving tokens:', error);
      throw error;
    }
  },

  /**
   * ‡∏≠‡πà‡∏≤‡∏ô Access Token
   */
  getAccessToken: async (): Promise<string | null> => {
    try {
      const token = await SecureStore.getItemAsync(ACCESS_TOKEN_KEY);
      return token;
    } catch (error) {
      console.error('Error getting access token:', error);
      return null;
    }
  },

  /**
   * ‡∏≠‡πà‡∏≤‡∏ô Refresh Token
   */
  getRefreshToken: async (): Promise<string | null> => {
    try {
      const token = await SecureStore.getItemAsync(REFRESH_TOKEN_KEY);
      return token;
    } catch (error) {
      console.error('Error getting refresh token:', error);
      return null;
    }
  },

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Access Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
   */
  isAccessTokenExpired: async (): Promise<boolean> => {
    try {
      const expiresAtStr = await SecureStore.getItemAsync(TOKEN_EXPIRES_KEY);
      if (!expiresAtStr) return true;
      
      const expiresAt = parseInt(expiresAtStr);
      const now = Date.now();
      
      // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ 5 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏£‡∏¥‡∏á
      return (expiresAt - 5 * 60 * 1000) <= now;
    } catch (error) {
      console.error('Error checking token expiration:', error);
      return true;
    }
  },

 
  getValidAccessToken: async (): Promise<string | null> => {
    try {
      const isExpired = await AuthService.isAccessTokenExpired();
      
      if (isExpired) {
        // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° refresh token
        const refreshed = await AuthService.refreshAccessToken();
        if (!refreshed) {
          return null;
        }
      }
      
      return await AuthService.getAccessToken();
    } catch (error) {
      console.error('Error getting valid access token:', error);
      return null;
    }
  },

  /**
   * Refresh Access Token ‡∏î‡πâ‡∏ß‡∏¢ Refresh Token
   */
  refreshAccessToken: async (): Promise<boolean> => {
    try {
      const refreshToken = await AuthService.getRefreshToken();
      if (!refreshToken) {
        console.log('No refresh token available');
        return false;
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠ refresh token
      // TODO: ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ API endpoint ‡∏à‡∏£‡∏¥‡∏á
      const response = await fetch('https://your-api-domain.com/api/auth/refresh', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${refreshToken}`
        }
      });

      if (!response.ok) {
        throw new Error('Failed to refresh token');
      }

      const data = await response.json();
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡πÉ‡∏´‡∏°‡πà
      await AuthService.saveTokens({
        accessToken: data.accessToken,
        refreshToken: data.refreshToken || refreshToken, // ‡∏ö‡∏≤‡∏á API ‡πÉ‡∏´‡πâ refresh token ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢
        expiresAt: data.expiresAt || (Date.now() + (30 * 60 * 1000)) // default 30 ‡∏ô‡∏≤‡∏ó‡∏µ
      });

      return true;
    } catch (error) {
      console.error('Error refreshing access token:', error);
      // ‡∏ñ‡πâ‡∏≤ refresh ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á logout
      await AuthService.clearAuthData();
      return false;
    }
  },

  /**
   * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
   */
  saveUserData: async (userData: UserDetails): Promise<void> => {
    try {
      await SecureStore.setItemAsync(USER_DATA_KEY, JSON.stringify(userData));
    } catch (error) {
      console.error('Error saving user data:', error);
      throw error;
    }
  },

  /**
   * ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
   */
  getUserData: async (): Promise<UserDetails | null> => {
    try {
      const userData = await SecureStore.getItemAsync(USER_DATA_KEY);
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      console.error('Error getting user data:', error);
      return null;
    }
  },

  /**
   * ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• authentication ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  clearAuthData: async (): Promise<void> => {
    try {
      await Promise.all([
        SecureStore.deleteItemAsync(ACCESS_TOKEN_KEY),
        SecureStore.deleteItemAsync(REFRESH_TOKEN_KEY),
        SecureStore.deleteItemAsync(USER_DATA_KEY),
        SecureStore.deleteItemAsync(TOKEN_EXPIRES_KEY)
      ]);
    } catch (error) {
      console.error('Error clearing auth data:', error);
    }
  },

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user login ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  isLoggedIn: async (): Promise<boolean> => {
    try {
      const accessToken = await AuthService.getAccessToken();
      const refreshToken = await AuthService.getRefreshToken();
      
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ refresh token ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á login ‡∏≠‡∏¢‡∏π‡πà
      // ‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ access token ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏ï‡∏≤‡∏°
      return !!(accessToken && refreshToken);
    } catch (error) {
      console.error('Error checking login status:', error);
      return false;
    }
  },

  /**
   * Login ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å tokens
   */
  login: async (googleIdToken: string): Promise<{ success: boolean; user?: UserDetails , newUser? : boolean }> => {
    try {
      console.log('üîÑ Starting API login with Google token...');
      // TODO: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å login API
      const response = await fetch(`${BASE_URL}/api/users/login`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.ACCESS_TOKEN_ID}`
        },
        body: JSON.stringify({ 
          token_id: googleIdToken
        })
      });
      console.log('üì° Response status:', response.status);
      
      if (!response.ok) {
        throw new Error('Login failed');
      }

      const data = await response.json();
      let newUser = false
      switch (response.status) {
        case 200:
          newUser = false
          break;
        case 201:
          newUser = true
          break;
        default:
          console.log('Unexpected status:', response.status);
      }
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å tokens
      await AuthService.saveTokens({
        accessToken: data.accessToken,
        refreshToken: data.refreshToken,
        expiresAt: data.expiresAt
      });

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
      const userData: UserDetails = {
        id: data.user_id,
        name: data.name,
        phone: data.phone,
        user_image: data.profile_picture_url,
        email: data.email,
      };
      await AuthService.saveUserData(userData);

      return { success: true, user: userData , newUser : newUser };
    } catch (error) {
      console.error('Login error:', error);
      return { success: false };
    }
  },

  /**
   * Logout
   */
  logout: async (): Promise<void> => {
    try {
      const refreshToken = await AuthService.getRefreshToken();
      
      // if (refreshToken) {
      //   await fetch('https://api.example.com/auth/logout', {
      //     method: 'POST',
      //     headers: {
      //       'Content-Type': 'application/json',
      //       'Authorization': `Bearer ${refreshToken}`
      //     }
      //   });
      // }
    } catch (error) {
      console.error('Logout API error:', error);
    } finally {
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
      await AuthService.clearAuthData();
    }
  }
};